---

controllers:
  bitmagnet:
    initContainers:
      wait-for-postgres:
        image:
          repository: postgres
          tag: 16-alpine
          pullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - >
            until pg_isready -h $POSTGRES_HOST -p 5432;
            do echo "waiting for postgres"; sleep 2;
            done;
        env:
          - name: POSTGRES_HOST
            value: '{{ .Release.Name }}-postgres'
          - name: POSTGRES_DB
            value: bitmagnet
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: '{{ .Release.Name }}-secrets'
                key: postgres-username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '{{ .Release.Name }}-secrets'
                key: postgres-password

    containers:
      bitmagnet:
        image:
          # -- image repository
          repository: ghcr.io/bitmagnet-io/bitmagnet
          # -- image tag (defaults to version defined in the chart)
          tag:
          # -- image pull policy
          pullPolicy: IfNotPresent

        args:
          - worker
          - run
          - --all

        # -- Environment variables. Template enabled.
        env:
          - name: POSTGRES_HOST
            value: '{{ .Release.Name }}-postgres'
          - name: POSTGRES_NAME
            value: bitmagnet
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: '{{ .Release.Name }}-secrets'
                key: postgres-username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '{{ .Release.Name }}-secrets'
                key: postgres-password
          - name: TMDB_API_KEY
            valueFrom:
              secretKeyRef:
                name: '{{ .Release.Name }}-secrets'
                key: tmdb-api-key

        # -- Set the resource requests / limits for the container.
        resources: {}
          # limits:
          #   cpu: 500m
          #   memory: 1024Mi
          # requests:
          #   cpu: 250m
          #   memory: 512Mi

  postgres:
    # -- enable the controller.
    enabled: true

    # -- Set the controller type.
    # Valid options are deployment, daemonset, statefulset, cronjob or job
    type: statefulset
    # -- Number of desired pods. When using a HorizontalPodAutoscaler, set this to `null`.
    replicas: 1
    # -- Set the controller upgrade strategy
    strategy: OnDelete

    # -- StatefulSet configuration.
    statefulset:
      # -- Used to create individual disks for each instance.
      volumeClaimTemplates:
      - name: data
        labels: {}
        annotations: {}
        globalMounts:
          - path: /var/lib/postgresql
        accessMode: "ReadWriteOnce"
        size: 80Gi
        # -- If set to `-`, dynamic provisioning is disabled.
        # If set to something else, the given storageClass is used.
        # If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner.
        # storageClass: # "-"

    containers:
      postgres:
        image:
          # -- image repository
          repository: postgres
          # -- image tag
          tag: 16-alpine
          # -- image pull policy
          pullPolicy: IfNotPresent

        # -- Environment variables. Template enabled.
        env:
          - name: POSTGRES_HOST
            value: '{{ .Release.Name }}-postgres'
          - name: POSTGRES_DB
            value: bitmagnet
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: '{{ .Release.Name }}-secrets'
                key: postgres-username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '{{ .Release.Name }}-secrets'
                key: postgres-password

        # -- Probe configuration
        # -- [[ref]](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
        probes:
          # -- Liveness probe configuration
          # @default -- See below
          liveness:
            # -- Enable the liveness probe
            enabled: true
            # -- Set this to `true` if you wish to specify your own livenessProbe
            custom: true
            # -- The spec field contains the values for the default livenessProbe.
            # @default -- See below
            spec:
              exec:
                command:
                  - sh
                  - -c
                  - |
                    pg_isready -U "$PGUSER" -d "$POSTGRES_DB" -h localhost
              initialDelaySeconds: 60
              periodSeconds: 30
              timeoutSeconds: 5
              failureThreshold: 3

          # -- Readiness probe configuration
          readiness:
            # -- Enable the readiness probe
            enabled: true
            # -- Set this to `true` if you wish to specify your own readinessProbe
            custom: true
            # -- The spec field contains the values for the default readinessProbe.
            # @default -- See below
            spec:
              exec:
                command:
                  - sh
                  - -c
                  - |
                    psql -U "$PGUSER" -d "$POSTGRES_DB" -c "SELECT 1"
              initialDelaySeconds: 20
              periodSeconds: 15
              timeoutSeconds: 5
              failureThreshold: 3

          # -- Startup probe configuration
          startup:
            # -- Enable the startup probe
            enabled: true
            # -- Set this to `true` if you wish to specify your own startupProbe
            custom: true
            # -- The spec field contains the values for the default startupProbe.
            # @default -- See below
            spec:
              exec:
                command:
                  - sh
                  - -c
                  - |
                    pg_isready -U "$PGUSER" -d "$POSTGRES_DB" -h localhost
              initialDelaySeconds: 10
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 12

        # -- Set the resource requests / limits for the container.
        resources:
          {}
          ## We usually recommend not to specify default resources and to leave this as a conscious
          ## choice for the user. This also increases chances charts run on environments with little
          ## resources, such as Minikube. If you do want to specify resources, uncomment the following
          ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
          #   memory: 128Mi


# -- Use this to populate secrets with the values you specify.
# Be aware that these values are not encrypted by default, and could therefore visible
# to anybody with access to the values.yaml file.
# @default -- See below
secrets:
  bitmagnet-secrets:
    # -- Enables or disables the Secret
    enabled: true
    # -- Sets the suffix of the secret otherwise it will just be the release name
    suffix: secrets
    # -- Secret stringData content. Helm template enabled.
    stringData:
      postgres-username: postgres
      postgres-password: K8Y763jYxsFz
      # tmdb-api-key:


# -- Configure the services for the chart here.
# Additional services can be added by adding a dictionary key similar to the 'main' service.
# @default -- See below
service:
  bitmagnet:
    # -- Enables or disables the service
    enabled: true

    # -- Configure which controller this service should target
    controller: bitmagnet

    # -- Make this the primary service for this controller (used in probes, notes, etc...).
    # If there is more than 1 service targeting the controller, make sure that only 1 service is
    # marked as primary.
    primary: true

    # -- Set the service type
    type: ClusterIP

    # -- Provide additional annotations which may be required.
    annotations: {}

    # -- Provide additional labels which may be required.
    labels: {}

    # -- Allow adding additional match labels
    extraSelectorLabels: {}

    # -- Configure the Service port information here.
    # Additional ports can be added by adding a dictionary key similar to the 'http' service.
    # @default -- See below
    ports:
      http:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port
        primary: true

        # -- The port number
        port: 80

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: HTTP

        # -- Specify a service targetPort if you wish to differ the service port from the application port.
        targetPort: 3333

      bittorrent-tcp:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port
        primary: true

        # -- The port number
        port: 3334

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: TCP

      bittorrent-udp:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port
        primary: true

        # -- The port number
        port: 3334

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: UDP

  postgres:
    # -- Enables or disables the service
    enabled: true

    # -- Configure which controller this service should target
    controller: postgres

    # -- Make this the primary service for this controller (used in probes, notes, etc...).
    # If there is more than 1 service targeting the controller, make sure that only 1 service is
    # marked as primary.
    primary: true

    # -- Set the service type
    type: ClusterIP

    # -- Provide additional annotations which may be required.
    annotations: {}

    # -- Provide additional labels which may be required.
    labels: {}

    # -- Allow adding additional match labels
    extraSelectorLabels: {}

    # -- Configure the Service port information here.
    # Additional ports can be added by adding a dictionary key similar to the 'http' service.
    # @default -- See below
    ports:
      postgres:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port
        primary: true

        # -- The port number
        port: 5432

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: HTTP

# -- Configure the ingresses for the chart here.
ingress:
  {}

  # -- An example is shown below
  # main:
  #   # -- Enables or disables the ingress
  #   enabled: true

  #   # -- Override the name suffix that is used for this ingress.
  #   nameOverride:

  #   # -- Provide additional annotations which may be required. Helm templates can be used.
  #   annotations: {}

  #   # -- Provide additional labels which may be required. Helm templates can be used.
  #   labels: {}

  #   # -- Set the ingressClass that is used for this ingress.
  #   className:

  #   # -- Configure the defaultBackend for this ingress. This will disable any other rules for the ingress.
  #   defaultBackend:

  #   ## Configure the hosts for the ingress
  #   hosts:
  #     - # -- Host address. Helm template can be passed.
  #       host: chart-example.local
  #       ## Configure the paths for the host
  #       paths:
  #         - # -- Path.  Helm template can be passed.
  #           path: /
  #           pathType: Prefix
  #           service:
  #             # -- Overrides the service name reference for this path
  #             # The service name to reference.
  #             name: main
  #             # -- Reference a service identifier from this values.yaml
  #             identifier: main
  #             # -- Overrides the service port number reference for this path
  #             port:

  #   # -- Configure TLS for the ingress. Both secretName and hosts can process a Helm template.
  #   tls: []
  #   #  - secretName: chart-example-tls
  #   #    hosts:
  #   #      - chart-example.local



# -- Configure persistence for the chart here.
# Additional items can be added by adding a dictionary key similar to the 'config' key.
# [[ref]](https://bjw-s-labs.github.io/helm-charts/docs/common-library/common-library-storage)
# @default -- See below
persistence:
  bitmagnet-config:
    # -- Enables or disables the persistence item. Defaults to true
    enabled: true

    # -- The sufix to append to the release name for this item.
    suffix: config

    # -- Sets the persistence type
    # Valid options are persistentVolumeClaim, emptyDir, nfs, hostPath, secret, configMap or custom
    type: persistentVolumeClaim

    # -- Storage Class for the config volume.
    # If set to `-`, dynamic provisioning is disabled.
    # If set to something else, the given storageClass is used.
    # If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner.
    storageClass: # "-"

    # -- If you want to reuse an existing claim, the name of the existing PVC can be passed here.
    existingClaim: # your-claim

    # -- The optional data source for the persistentVolumeClaim.
    # [[ref]](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#volume-populators-and-data-sources)
    dataSource: {}

    # -- The optional volume populator for the persistentVolumeClaim.
    # [[ref]](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#volume-populators-and-data-sources)
    dataSourceRef: {}

    # -- AccessMode for the persistent volume.
    # Make sure to select an access mode that is supported by your storage provider!
    # [[ref]](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes)
    accessMode: ReadWriteOnce

    # -- The amount of storage that is requested for the persistent volume.
    size: 10Gi

    # -- Set to true to retain the PVC upon `helm uninstall`
    retain: true

    # -- Configure mounts to all controllers and containers.
    advancedMounts:
      bitmagnet:
        main:
          - path: /root/.config/bitmagnet
            readOnly: false